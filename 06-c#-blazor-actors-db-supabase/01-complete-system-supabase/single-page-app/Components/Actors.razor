@page "/actors"

@inject IActorService _actorService
@inject ICountryService _countryService
@inject IMessagingService _messagingService
@inject NavigationManager _navigationManager

@if (_actors == null)
{
    <p><em>Loading actors...</em></p>
}
else
{
    <h2>All enlisted actors</h2>

    <div>
        <label>First name:
            <input @bind="FirstName" />
        </label>
        <label>Last name:
            <input @bind="LastName" />
        </label>
        <select @onchange="ConutryChanged">
            @foreach (var c in _countries)
            {
                <option value=@c.countryCode>@c.countryName</option>
            }
        </select>
        <button @onclick="Add"> Add</button>
    </div>

    <ul class="heroes">
        @foreach (var a in _actors)
        {
            <li>
                <span @onclick="@(()=>OnSelect(a))">
                    <span class="badge">@a.actorId</span> @a.firstName &nbsp; @a.lastName
                    - @a.dateOfBirth?.ToShortDateString() ( @a.countryCode )
                </span>
                <button class="delete" @onclick="@(()=>Delete(a))">x</button>
            </li>
        }
    </ul>
}

@code
{
    private List<Actor> _actors;
    private List<Country> _countries;

    private long _selectedCountryId;


    private string FirstName { get; set; } = "";
    private string LastName { get; set; } = "";
    private string Country { get; set; } = "";

    protected override async Task OnInitializedAsync()
    {
        _countries = await _countryService.GetCountries();
        _actors = await _actorService.GetActors();
    }

    private async Task OnSelect(Actor actor)
    {
        await _messagingService.Add("ActorComponent::Actor selected: " + actor.firstName + " "
        + actor.lastName);
        _navigationManager.NavigateTo("/actordetail/" + actor.actorId);
    }

    private async Task Add()
    {
        await _actorService.Add(FirstName, LastName, _selectedCountryId);
        _actors = await _actorService.GetActors();
        await _messagingService.Add("ActorComponent::Actor added: "
            + FirstName + " " + LastName);
    }

    private async Task Delete(Actor actor)
    {
        await _actorService.Delete(actor);
        _actors = await _actorService.GetActors();
        await _messagingService.Add("ActorComponent::Actor deleted: "
        + actor.firstName + " " + LastName);
    }

    private async Task ConutryChanged(ChangeEventArgs e)
    {
        _selectedCountryId = long.Parse(e.Value.ToString());
        await _messagingService.Add("ActorComponent::Country selected: "
        + e.Value.ToString());
    }

}
